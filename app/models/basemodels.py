from sqlmodel import SQLModel, Field, create_engine

class Team(SQLModel, table = True):
    id: int |None = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    headquarters: str

class Hero(SQLModel, table = True):
    id: int | None = Field(default=None, primary_key=True)
    name: str = Field(index=True)  # index=True will create an index on the name column for faster queries
    secret_name: str
    age: int | None = Field(default=None, index=True)  # age is optional, so it can be None
    team_id: int | None = Field(default=None, foreign_key="team.id")  # This will create a foreign key relationship with the Team table
# When we declare a model with SQLModel, with the table = True argument, it means that this model will be used to create a table in the database. 
# Because of this, we can use the SQLModel.metadata.create_all(engine) method to create the table in the database.

# Create an SQLite database engine
sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///db/{sqlite_file_name}"    # Each supported database has its own URL type. For example, for SQLite it is sqlite:/// followed by the file path. For example: 
                                                # sqlite:///database.db or sqlite:///databases/local/application.db
                                                # When use double // in sqilte:// means the db lives in memory, so it will not be persisted. And gets deleted when the program ends.

engine = create_engine(sqlite_url, echo=True)   #echo=True will log all the SQL statements generated by SQLModel in production is better echo = False

print("Engine created successfully.")

def create_db_and_tables():
    SQLModel.metadata.create_all(engine)            # This will create the database tables based on the defined models if they do not already exist.

def drop_tables():
    SQLModel.metadata.drop_all(engine)  # This will drop all the tables in the database, so be careful when using this method as it will delete all data in the tables
    
def main():
    create_db_and_tables()  # This will create the database and tables if they do not exist
    print("Database and tables created successfully.")

if __name__ == "__main__":
    main()  # This will run the main function when the script is executed
# This is the entry point of the application, so when we run this script it will create